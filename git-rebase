The git 'rebase' and 'merge' is similar

# creating a new branch from another
git checkout -b development master # creating 'development' branch from 'master' branch 

# check to the new branch just created 'development'
git checkout development

# add/change file contents on the 'development' branch 
echo "code 2" >> app.txt

# add and commit the changes
git add app.txt; git commit -m "new code changes on the development branch"

# Now use the git 'rebase' command
git checkout master
git rebase development

---------------------


If issues arise with a git pull from the main branch because of being behind the feature branch, all it need to do is 
```
git checkout master
git pull origin master
git checkout [development-branch]

git rebase master # from the [development-branch]
# Resolve the conflicts generated
# git add . # (all files that have been resolved from the merge conflicts)
git push --force origin [development-branch]
# Then it should have all the master commits updated in the [development-branch]
```
