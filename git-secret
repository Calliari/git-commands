### git-secret encrypts files and stores them inside your git repository, providing a history of changes for every commit

References;
https://git-secret.io/
https://www.liquidweb.com/kb/how-to-install-and-use-git-secret/
https://asciinema.org/a/41811?autoplay=1

How does git-secret solve these problems?

    git-secret encrypts files and stores them inside your git repository, providing a history of changes for every commit.
    git-secret doesn’t require any extra deploy operations other than providing the appropriate private key (to allow decryption), and using git secret reveal to decrypt all the secret files.


Note all the contents of the .gitsecret/ folder should be checked in, /except/ the random_seed file. This also means that of all the files in .gitsecret/, only the random_seed file should be mentioned in your .gitignore file.


1. First install the `git-secret` cmd script (MAC OS)
brew install git-secret


2. Create/add a gpg keypair to encrypt our data
gpg --full-generate-key


3. Initialise the 'git secret', that will create a directory named: `.gitsecret`
git secret init


4. Uses gpg to encrypt files with the public keys of the users that you trust, and which you have specified with git secret tell email@address.id. Then these users can decrypt these files using their personal secret key.
This email should be the same as the email address you used with your gpg keys.
The files will be encrypted with the public keys in your git-secret repo’s keyring, each corresponding to a user’s email that you used with tell
git-secret tell your-email@domain.com

5. Now we can start adding files to your new secret repo with this command:
git-secret add filename.ext file1.ext file2.ext file3.ext file4.ext

6. Once we have added the files to the secret repo, we can securely encrypt them using this command:
git-secret hide

7. To decrypt a file or files, we can use the command:
git secret reveal

7.1 Or print their contents to stdout with
git secret cat

The newly added user cannot read the encrypted files after fileas are already encrypted. (The -d options deletes the unencrypted file after re-encrypting it).
re-encrypt the files using:
git secret reveal
git secret hide -d
then commit and push the newly encrypted files, now the newly added user will be able to decrypt the files in the repo using git-secret reveal


To remove someone’s access, use `git secret removeperson email@address.id` to delete their public key from your repo’s git-secret keyring, and reencrypt the files. Then they won’t be able to decrypt secrets anymore.
git secret removeperson email@address.id
